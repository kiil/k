[{"content":"","date":null,"permalink":"/en/resource/","section":"Resources","summary":"","title":"Resources"},{"content":"","date":null,"permalink":"/en/blog/","section":"Blog","summary":"","title":"Blog"},{"content":"The two basic kinds of content creation workflows when working with LLMs are these:\nSemi-automatic\nLLM -\u0026gt; editor -\u0026gt; publication\nFully automatic\nLLM -\u0026gt; publication\nOf course there can be various -pre, -in between and -post processing steps by code in either.\nBut here I focus on whether a human is involved in the content creation workflow or not.\nFirst, let\u0026rsquo;s have a look at the advantages of either approach:\nAdvantages # Fully Automatic Workflow Semi-Automatic Workflow Speed - Processes can be completed rapidly without human intervention. Quality Control - Human editors can ensure higher accuracy and quality by intervening when necessary. Consistency - Outputs are uniform without any subjective variation. Flexibility - Adaptations can be made on-the-fly based on editor insights or external feedback. Scalability - Easy to scale operations to handle large volumes of tasks without additional human resource costs. Error Correction - Human insight allows for immediate error identification and correction, which might be overlooked by automated systems. Cost Efficiency - Reduces labor costs associated with manual tasks over long periods. Critical Thinking - Humans can apply nuanced judgment that is difficult for automated systems to replicate, especially in complex scenarios. 24/7 Availability - Can operate continuously without breaks or downtime needed by humans. Process Improvement- Human intervention secures immediate feedback on workflow results, improving processes over time. And then, what are the disadvantages?\nDisadvantages # Fully Automatic Workflow Semi-Automatic Workflow Lack of Flexibility - Struggles with handling exceptions or unexpected situations that are not pre-programmed. Slower Processes - Involvement of human editors can slow down the workflow compared to fully automated systems. Limited Understanding - May not interpret complex or nuanced information as effectively as a human. Higher Costs - Requires ongoing investment in human resources, which can be more expensive than fully automated solutions. Dependency on Data Quality - Performance heavily reliant on the quality and breadth of the input data. Inconsistency - Human intervention might introduce variability in the output quality depending on the individual editor\u0026rsquo;s skills and judgments. No Personal Touch - Unable to provide the human-like interactions or decisions that might be necessary in some fields like customer service. Scalability Issues - Scaling up involves additional training and hiring, which can be costly and time-consuming. Over-reliance on Technology - Can lead to reduced skills among staff and an over-dependence on automated systems. Fatigue and Errors - Human editors can make mistakes, especially when handling repetitive tasks or working under pressure. As always you cannot have it all. There are trade offs to both techniques.\nIn reality it is good to switch back and forth between to the two workflow types especially during the development phase to reap the awards and insights of both.\nIt goes without saying that some content creation tasks are more suited for full automatization while others require human oversight.\n","date":"20 July 2024","permalink":"/en/blog/2024-07-20-the-2-basic-workflows-for-ai-assisted-content-generation/","section":"Blog","summary":"The two basic kinds of content creation workflows when working with LLMs are these:","title":"The 2 basic workflows for ai-assisted content generation"},{"content":"Working with AI, particularly LLM\u0026rsquo;s and speech.\nInterested in the interplay of langauge, thought and dialogue.\n","date":null,"permalink":"/en/","section":"Welcome to Kiils","summary":"Working with AI, particularly LLM\u0026rsquo;s and speech.","title":"Welcome to Kiils"},{"content":"","date":null,"permalink":"/en/tools/aichat/","section":"Tools","summary":"","title":"Aichat"},{"content":"So I want to publish a listicle on my website.\nIt just so happens that listicles are among the content genres that are most effectively and convincingly assisted in their creation by generative artificial intelligence. I could explain why this is, but in this blog I will instead show you how to create a listicle and publish it - all without ever leaving your shell 🤭.\nIf you need ideas for listicles, I am sure GAI can help you with that too. I got the idea from my sons now former interest in the strange spectacle of wrestling.\nAnd I am a little curious about these colorful personalities myself.\nFirst, get the list of the best wrestlers.\nFor this I have coded my own nushell custom command which uses \u0026quot;response_format\u0026quot;:{\u0026quot;type\u0026quot;:\u0026quot;json_object\u0026quot;}, which aichat does not. This allows me to cleanly get just the list items (the values) themselves, every time. No exceptions.\ndef lls [ ...prompt: string ] { if ($in | is-empty) and ($prompt | is-empty) { 'Please provide input' } else { let prompt = ( if not ($in | is-empty) and not ($prompt | is-empty) { ($prompt | str join ' ') ++ ' ' ++ $in } else if not ($in | is-empty) and ($prompt | is-empty) { $in } else { ($prompt | str join ' ') } ) let system = \u0026quot;Output valid json.\u0026quot; let payload = {\u0026quot;model\u0026quot;:\u0026quot;gpt-3.5-turbo-0125\u0026quot;, \u0026quot;response_format\u0026quot;:{\u0026quot;type\u0026quot;:\u0026quot;json_object\u0026quot;}, \u0026quot;messages\u0026quot;:[{\u0026quot;role\u0026quot;:\u0026quot;system\u0026quot;,\u0026quot;content\u0026quot;:$system}, {\u0026quot;role\u0026quot;:\u0026quot;user\u0026quot;,\u0026quot;content\u0026quot;:$prompt}]} print 'Samlet prompt: ' $prompt \u0026quot;\\n\u0026quot; let response = (http post --content-type application/json --full --headers [Content-Type application/json Authorization $\u0026quot;Bearer ($env.OPENAI_API_KEY)\u0026quot;] https://api.openai.com/v1/chat/completions $payload ) $response | get body.choices.message.content.0 | from json | values | flatten | flatten | flatten | tee { to json | wl-copy } } } Running lls greatest wrestlers of all time list then gives\n[ \u0026quot;Hulk Hogan\u0026quot;, \u0026quot;The Rock\u0026quot;, \u0026quot;Stone Cold Steve Austin\u0026quot;, \u0026quot;John Cena\u0026quot;, \u0026quot;Ric Flair\u0026quot;, \u0026quot;Shawn Michaels\u0026quot;, \u0026quot;Undertaker\u0026quot;, \u0026quot;Bret Hart\u0026quot;, \u0026quot;Macho Man Randy Savage\u0026quot;, \u0026quot;Andre the Giant\u0026quot; ] I\u0026rsquo;ll just trust Sam Altman here, since I do not posses the knowledge to evaluate the list myself. So onwards with this list of GOATs in wrestling.\nThe next step is to enrich the list with a brief description of each subject on the list. I do this like so:\nlet enriched = p | from json | wrap subject | insert description { aichat short description of $in.subject } (I wish commands like insert, upsert and update could run in parallel like par-each can, but I currently do not think that is possible. See also Speeding up ai-assisted content generation with nushell par-each · Kiils)\nIn json the enriched variable then looks something like:\n[ { \u0026quot;subject\u0026quot;: \u0026quot;Hulk Hogan\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Hulk Hogan, born Terry Eugene Bollea on August 11, 1953, is an iconic American professional wrestler, television personality, actor, and musician. He gained worldwide fame in the 1980s and 1990s as the face of World Wrestling Federation (WWF, now WWE), becoming one of the most popular and recognizable figures in wrestling history. Known for his charismatic personality, signature moves, and catchphrases like \\\u0026quot;Hulkamania\\\u0026quot; and \\\u0026quot;Whatcha gonna do brother?\\\u0026quot;, Hogan has a lasting legacy in the world of sports entertainment.\u0026quot; }, { \u0026quot;subject\u0026quot;: \u0026quot;The Rock\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Dwayne \\\u0026quot;The Rock\\\u0026quot; Johnson is an American actor, producer, and former professional wrestler. He gained fame as a WWE superstar before transitioning to a successful film career. Known for his charismatic personality and impressive physique, The Rock has starred in blockbuster movies such as the \\\u0026quot;Fast \u0026amp; Furious\\\u0026quot; series, \\\u0026quot;Jumanji,\\\u0026quot; and \\\u0026quot;Moana.\\\u0026quot; He is also a notable philanthropist and entrepreneur.\u0026quot; }, { \u0026quot;subject\u0026quot;: \u0026quot;Stone Cold Steve Austin\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Stone Cold Steve Austin, born Steven James Anderson, is a retired professional wrestler and actor who gained iconic status in the WWE during the late 1990s and early 2000s. Known for his rebellious anti-authority persona, Austin became a fan favorite with his trademark \\\u0026quot;Austin 3:16\\\u0026quot; catchphrase, intense in-ring style, and memorable feuds with Vince McMahon and other top superstars. He is one of the most popular and influential wrestlers in history, contributing significantly to WWE's \\\u0026quot;Attitude Era.\\\u0026quot;\u0026quot; }, ... These descriptions confirm my suspicion that the best wrestlers are all highly entertaining personalities, as much as great athletes, if not more so.\nThis I then \u0026ldquo;convert\u0026rdquo; to markdown like so\nlet md = $enriched | each { $\u0026quot;\\n## ($in.subject)\\n\\n($in.description)\\n\u0026quot; } | to text giving\n## Hulk Hogan Hulk Hogan, born Terry Eugene Bollea on August 11, 1953, is an iconic American professional wrestler, television personality, actor, and musician. He gained worldwide fame in the 1980s and 1990s as the face of World Wrestling Federation (WWF, now WWE), becoming one of the most popular and recognizable figures in wrestling history. Known for his charismatic personality, signature moves, and catchphrases like \u0026quot;Hulkamania\u0026quot; and \u0026quot;Whatcha gonna do brother?\u0026quot;, Hogan has a lasting legacy in the world of sports entertainment. ## The Rock Dwayne \u0026quot;The Rock\u0026quot; Johnson is an American actor, producer, and former professional wrestler. He gained fame as a WWE superstar before transitioning to a successful film career. Known for his charismatic personality and impressive physique, The Rock has starred in blockbuster movies such as the \u0026quot;Fast \u0026amp; Furious\u0026quot; series, \u0026quot;Jumanji,\u0026quot; and \u0026quot;Moana.\u0026quot; He is also a notable philanthropist and entrepreneur. ## Stone Cold Steve Austin Stone Cold Steve Austin, born Steven James Anderson, is a retired professional wrestler and actor who gained iconic status in the WWE during the late 1990s and early 2000s. ... Then I edit this manually.\nNext step is to ready the text for publishing on a drupal site. So I embed the markdown in json. And either manually or with ai assistance provide a title, and finally move the title before the content (only for my own viewing convenience)\nlet jsontc = $md | to json | wrap content | insert title { 'GOATs and OGs of wrestling' } | select title content giving\n╭─────────┬────────────────────────────────────────────────────────────────────╮ │ title │ GOATs and OGs of wrestling │ │ content │ \u0026quot;\\n## Hulk Hogan\\n\\nHulk Hogan, born Terry Eugene Bollea on August │ │ │ 11, 1953, is an iconic American professional wrestler, television │ │ │ personality, actor, and musician. He gained worldwide fame in the │ │ │ 1980s and 1990s as the face of World Wrestling Federation (WWF, │ │ │ now WWE), becoming one of the most popular and recognizable │ │ │ figures in wrestling history. Known for his charismatic │ │ │ personality, signature moves, and catchphrases like \\\u0026quot;Hulkamania\\\u0026quot; │ │ │ and \\\u0026quot;Whatcha gonna do brother?\\\u0026quot;, Hogan has a lasting legacy in │ Now we need to get the payload for the drupal jsonapi ready:\nlet payload = ( $jsontc | par-each { ( { \u0026quot;data\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;node--listicle\u0026quot;, \u0026quot;attributes\u0026quot;: { \u0026quot;title\u0026quot;: $jsontc.title, \u0026quot;body\u0026quot;: { \u0026quot;value\u0026quot;: ($jsontc.content | from json | pandoc --from markdown --to html), \u0026quot;format\u0026quot;: \u0026quot;ckeditor5\u0026quot; } }, \u0026quot;relationships\u0026quot;: { \u0026quot;uid\u0026quot;: { \u0026quot;data\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;user--user\u0026quot;, \u0026quot;id\u0026quot;: 7d137122-c5f9-4313-b417-4a97cd5ba79f } }, } } } ) } ) The payload looks like this now:\n╭──────┬─────────────────────────────────────────────────────────────────────────────────────────────────╮ │ │ ╭───────────────┬─────────────────────────────────────────────────────────────────────────────╮ │ │ data │ │ type │ node--listicle │ │ │ │ │ │ ╭───────┬─────────────────────────────────────────────────────────────────╮ │ │ │ │ │ attributes │ │ title │ GOATs and OGs of wrestling │ │ │ │ │ │ │ │ │ ╭────────┬────────────────────────────────────────────────────╮ │ │ │ │ │ │ │ │ body │ │ value │ \u0026lt;h2 id=\u0026quot;hulk-hogan\u0026quot;\u0026gt;Hulk Hogan\u0026lt;/h2\u0026gt; │ │ │ │ │ │ │ │ │ │ │ │ \u0026lt;p\u0026gt;Hulk Hogan, │ │ │ │ │ │ │ │ │ │ │ │ born Terry Eugene Bollea on August 11, 1953, is an │ │ │ │ │ │ │ │ │ │ │ │ iconic │ │ │ │ │ │ │ │ │ │ │ │ American professional wrestler, television │ │ │ │ │ │ │ │ │ │ │ │ personality, actor, and │ │ │ │ │ │ │ │ │ │ │ │ musician. He gained │ │ │ │ which is what drupal expects.\nNow all that is left is to send it to the drupal site:\n( http post --content-type application/json --headers [Content-type application/vnd.api+json] --headers [Accept application/vnd.api+json] --user 'Lennart Kiil' --password 'password here' https://www.folkets.dk/jsonapi/node/listicle $payload ) | from json And now the listicle is online. In fact, you can read the translated, in Danish, version here:\nGOATs and OGs of wrestling\nPS. I forgot to mention, I also use pandoc in the above example. Pandoc is a great tool for converting between various text formats like html, markdown, plain and many more.\n","date":"16 July 2024","permalink":"/en/blog/2024-07-16-creating-listicles-with-nushell-and-aichat/","section":"Blog","summary":"So I want to publish a listicle on my website.","title":"Creating a listicle with nushell and aichat and publishing it on a drupal site"},{"content":"","date":null,"permalink":"/en/tools/drupal/","section":"Tools","summary":"","title":"Drupal"},{"content":"","date":null,"permalink":"/en/tools/nushell/","section":"Tools","summary":"","title":"Nushell"},{"content":"","date":null,"permalink":"/en/tools/pandoc/","section":"Tools","summary":"","title":"Pandoc"},{"content":"","date":null,"permalink":"/en/tools/","section":"Tools","summary":"","title":"Tools"},{"content":"Given this json list of wrestlers\n[ \u0026quot;Hulk Hogan\u0026quot;, \u0026quot;Stone Cold Steve Austin\u0026quot;, \u0026quot;The Rock\u0026quot;, \u0026quot;Ric Flair\u0026quot;, \u0026quot;Andre the Giant\u0026quot;, \u0026quot;Shawn Michaels\u0026quot;, \u0026quot;John Cena\u0026quot;, \u0026quot;The Undertaker\u0026quot;, \u0026quot;Bret Hart\u0026quot;, \u0026quot;Macho Man Randy Savage\u0026quot; ] the goal was simple.\nCreate a brief description of each wrestler.\nIn nushell that can be done in various ways. Two of which are:\nfrom json | par-each --threads 10 { aichat short description of $in } and\nfrom json | each { aichat short description of $in } The first one will make parallel requests to the openAI api.\nThe second one will make the requests one by one in serial.\nThe first one is about 8 times faster than the second one in this experiment.\n4sec 125ms 25µs 958ns for the first one, 30sec 983ms 614µs 878ns for the second.\nThis is a significant difference. Though, both are much faster than probably any human.\nFor anyone wondering about the wrestlers, these are the results:\n╭───┬─────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │ 0 │ Hulk Hogan, born Terry Eugene Bollea on August 11, 1953, is a retired professional wrestler, actor, and │ │ │ television personality. He gained worldwide fame in the 1980s and 1990s as one of the biggest stars in │ │ │ wrestling, particularly with World Wrestling Federation (WWF, now WWE). Known for his charisma, iconic │ │ │ handlebar mustache, and catchphrases like \u0026quot;Hulkamania\u0026quot; and \u0026quot;Whatcha gonna do?\u0026quot;, Hogan became a pop │ │ │ culture phenomenon. He has held multiple world championships and headlined several major wrestling │ │ │ events. Outside wrestling, he has appeared in films, TV shows, and commercials. Despite his success, │ │ │ Hogan's career has also faced controversies and legal battles. │ │ 1 │ \u0026quot;Stone Cold\u0026quot; Steve Austin, whose real name is Steve Austin, is a retired professional wrestler and one │ │ │ of the most iconic figures in the history of World Wrestling Entertainment (WWE). Known for his │ │ │ rebellious persona, Austin rose to stardom during the \u0026quot;Attitude Era\u0026quot; of the late 1990s and early 2000s. │ │ │ He was instrumental in the WWE's battle against rival promotions, contributing to the company's │ │ │ dominance in the industry. Characterized by his anti-authority stance, signature catchphrases like │ │ │ \u0026quot;Austin 3:16\u0026quot; and \u0026quot;Can I get a Hell Yeah?\u0026quot;, and his finishing move, the Stone Cold Stunner, Austin's │ │ │ legacy is celebrated for its impact on wrestling culture and pop culture at large. │ │ 2 │ Dwayne \u0026quot;The Rock\u0026quot; Johnson is an American actor, producer, and former professional wrestler. Born on May │ │ │ 2, 1972, he gained fame in the wrestling world with the WWE, where he became one of the most popular │ │ │ and charismatic wrestlers. Known for his catchphrases and electrifying persona, The Rock transitioned │ │ │ to a successful acting career. He has starred in blockbuster movies such as the \u0026quot;Fast \u0026amp; Furious\u0026quot; │ │ │ franchise, \u0026quot;Jumanji,\u0026quot; and \u0026quot;Moana.\u0026quot; Johnson is recognized for his impressive physique, charismatic │ │ │ personality, and work ethic, making him a beloved figure in entertainment and pop culture. │ │ 3 │ Ric Flair, also known as \u0026quot;The Nature Boy,\u0026quot; is a retired professional wrestler and wrestling manager, │ │ │ born on February 25, 1949. With a career spanning over 40 years, Flair is widely regarded as one of the │ │ │ greatest professional wrestlers of all time. He is celebrated for his charismatic personality, │ │ │ flamboyant style, and significant contributions to the wrestling industry. Flair is a 16-time World │ │ │ Champion, an honor recognized by both WWE and WCW. His influence extends beyond the ring, making him a │ │ │ cultural icon and a key figure in the evolution of professional wrestling. │ │ 4 │ André the Giant, born André René Roussimoff, was a French professional wrestler and actor renowned for │ │ │ his immense size, standing at 7 feet 4 inches and weighing approximately 520 pounds. His extraordinary │ │ │ stature was due to acromegaly, a condition caused by excess growth hormone. A beloved figure in World │ │ │ Wrestling Federation (WWF) during the 1970s and 80s, he was known for his larger-than-life personality │ │ │ and remarkable strength. Outside the ring, he achieved fame for his role as Fezzik in the cult classic │ │ │ film \u0026quot;The Princess Bride\u0026quot;. André's legacy endures in both wrestling and popular culture, remembered for │ │ │ his gentle demeanor and towering presence. He passed away in 1993. │ │ 5 │ Shawn Michaels, born Michael Shawn Hickenbottom on July 22, 1965, is a retired American professional │ │ │ wrestler, widely regarded as one of the greatest in the history of the sport. Known by the nickname │ │ │ \u0026quot;The Heartbreak Kid\u0026quot; (HBK), Michaels is celebrated for his charisma, in-ring agility, and ability to │ │ │ deliver memorable matches. His storied career in the WWE includes multiple WWE Championship reigns, │ │ │ unforgettable rivalries, and iconic matches such as the first-ever Hell in a Cell and the inaugural │ │ │ Ladder Match. Inducted into the WWE Hall of Fame in 2011, his legacy continues to influence the │ │ │ wrestling world today. │ │ 6 │ John Cena is an American professional wrestler, actor, and television host, known for his tenure with │ │ │ WWE (World Wrestling Entertainment). Born on April 23, 1977, he has won multiple world championships │ │ │ and is prominently known for his \u0026quot;Never Give Up\u0026quot; mantra. Outside of wrestling, Cena has appeared in │ │ │ various films such as \u0026quot;Blockers\u0026quot; and \u0026quot;The Suicide Squad,\u0026quot; and he has also hosted shows like \u0026quot;Are You │ │ │ Smarter Than a 5th Grader?\u0026quot; He is recognized for his philanthropy, especially with the Make-A-Wish │ │ │ Foundation, where he holds the record for granting the most wishes. │ │ 7 │ The Undertaker, whose real name is Mark William Calaway, is a retired American professional wrestler │ │ │ widely regarded as one of the greatest in WWE history. Debuting in 1990 with his iconic supernatural │ │ │ \u0026quot;Deadman\u0026quot; persona, he became famous for his eerie presence, intricate storylines, and the legendary │ │ │ WrestleMania winning streak, which lasted for 21 matches. Known for his signature moves like the │ │ │ Tombstone Piledriver and the Chokeslam, The Undertaker's career spanned over three decades, during │ │ │ which he won multiple championships and captivated fans with his dark, enigmatic character and │ │ │ unparalleled in-ring prowess. │ │ 8 │ Bret Hart, also known as \u0026quot;The Hitman,\u0026quot; is a retired Canadian professional wrestler, writer, and actor. │ │ │ Born on July 2, 1957, he is widely regarded as one of the greatest professional wrestlers of all time. │ │ │ He gained fame for his technical wrestling prowess, charismatic persona, and signature pink and black │ │ │ ring attire. Hart achieved significant success in the 1980s and 1990s, most notably in WWE (formerly │ │ │ WWF), where he held multiple world championships. He is also known for his tenure in WCW and for being │ │ │ part of the legendary Hart wrestling family. One of his most famous feuds involved the \u0026quot;Montreal │ │ │ Screwjob\u0026quot; incident in 1997. Beyond wrestling, Hart has authored books, appeared in films, and │ │ │ occasionally makes appearances in wrestling-related events. │ │ 9 │ \u0026quot;Macho Man\u0026quot; Randy Savage, born Randy Mario Poffo, was a professional wrestler and iconic figure in the │ │ │ world of sports entertainment. Known for his flamboyant attire, raspy voice, and intense charisma, │ │ │ Savage became one of the most recognizable and celebrated wrestlers of the 1980s and 1990s. He rose to │ │ │ fame in promotions like WWE (then WWF) and WCW, capturing multiple championships and headlining │ │ │ numerous major events. His signature catchphrase, \u0026quot;Ooh yeah!\u0026quot; and his memorable feuds with fellow │ │ │ wrestlers, including Hulk Hogan and Ricky \u0026quot;The Dragon\u0026quot; Steamboat, solidified his legacy as one of the │ │ │ all-time greats in professional wrestling. Additionally, Savage was a skilled in-ring performer, known │ │ │ for his athleticism and high-flying moves, most notably his diving elbow drop. │ ╰───┴─────────────────────────────────────────────────────────────────────────────────────────────────────────╯ ","date":"15 July 2024","permalink":"/en/blog/2024-07-15-speeding-up-ai-assisted-content-generation-with-nushell-par-each/","section":"Blog","summary":"Given this json list of wrestlers","title":"Speeding up ai-assisted content generation with nushell par-each"},{"content":"I\u0026rsquo;ve created hundreds of articles and other content forms with the assistance of artificial intelligence, more specifically LLM-techonology.\nFrom using generative artificial intelligence in content generation workflows hundreds if not thousand of times, a pattern has emerged.\nThe best results seem the follow from a recipe something like this:\nStarting from a RAG-enhanced base.\nEnrich this base with knowledge from the LLM.\nFinally reduce to a draft which I then always edit manually.\nI liken this proces to cooking a good sauce. Starting with some good bases ingredients. Then enriching with spice. And reducing to get a concentrated taste. The doing the final touches before serving.\n","date":"14 July 2024","permalink":"/en/blog/2024-07-14-the-secret-behind-good-ai-generated-content/","section":"Blog","summary":"I\u0026rsquo;ve created hundreds of articles and other content forms with the assistance of artificial intelligence, more specifically LLM-techonology.","title":"BER: The secret behind good AI-generated content"},{"content":"","date":null,"permalink":"/en/tools/llm/","section":"Tools","summary":"","title":"LLM"},{"content":"When working with a lot of text it is oftentimes useful to be able to edit fast, including being able to remove whole lines starting with, containing er ending with specific words.\nIn nushell this can be done in various ways. Here are a few for lines starting with a specific word:\nopen --raw text.md | lines | find --regex \u0026quot;^word\u0026quot; --invert open --raw text.md | lines | where $it !~ '^word' open --raw text.md | lines | where not ($it starts-with 'word') ","date":"30 June 2024","permalink":"/en/blog/2024-06-30-deleting-lines-with-nushell/","section":"Blog","summary":"When working with a lot of text it is oftentimes useful to be able to edit fast, including being able to remove whole lines starting with, containing er ending with specific words.","title":"Deleting lines with nushell"},{"content":"I use nushell in companion with generative artificiel intelligence a lot to automate simple journalistic workflows.\nI\u0026rsquo;ve already defined some basic custom commands in nushell. These custom commands do different things.\nI then use the custom commands in sequence inside small scripts to make complete workflows from the separate things each custom command does.\nSometimes just looking at a particular script, it can be difficult for me to remember what each command in the script does, and what it does in the context of the script.\nTo ensure that I can easily recall this information a while after I write the script, or to ensure that others can understand the script, I try to annotate each line in the script with a comment.\nHere is an example:\nopen somefile.yaml | each {|row| $row.ai-content | opret fn --print-path $row.ai-title } # opret markdown filer cd /home/lk/Noter/folkets.dk/Notitser/ # skift til bibliotek ls -f | get name | each { udgiv fn $in } # udgiv markdown filerne cd - # tilbage til Scripts Each line consists of the command in the script and then, after the \u0026lsquo;#\u0026rsquo;-sign, my explanation of what the line does.\nIf the above lines are in a file called temp.nu. I can simply write the following in my terminal:\nforklar temp.nu forklar is Danish for \u0026rsquo;explain\u0026rsquo;.\nRunning the above command will give me the following clear presentation of what is going on line by line in the script:\n╭───┬─────────────────────────┬──────────────────────────────────────────────────────────────────────────────────────────────╮ │ # │ comment │ code │ ├───┼─────────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────────┤ │ 0 │ opret markdown filer │ open somefile.yaml | each {|row| $row.ai-content | opret fn --print-path $row.ai-title } │ │ 1 │ skift til bibliotek │ cd /home/lk/Noter/folkets.dk/Notitser/ │ │ 2 │ udgiv markdown filerne │ ls -f | get name | each { udgiv fn $in } │ │ 3 │ tilbage til Scripts │ cd - │ ╰───┴─────────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────────╯ The reason I can do this is because I have created a custom command in nushell called forklar like so:\ndef forklar [path: string] { cat $path | from csv -s '#' -c '#' -n | rename code comment | move comment --before code } As the numbers of scripts I develop increase, this helps me remember exactly what the scripts do and how they do it.\nNushell already has an even better way of doing this for custom commands built right in to its help system.\n","date":"24 June 2024","permalink":"/en/blog/2024-06-24-using-nushell-to-make-sense-of-my-nushell-scripts/","section":"Blog","summary":"I use nushell in companion with generative artificiel intelligence a lot to automate simple journalistic workflows.","title":"Using this simple nushell command to make sense of my many nushell scripts"},{"content":"","date":null,"permalink":"/en/tools/nvim/","section":"Tools","summary":"","title":"Nvim"},{"content":"I took me a little while completely getting nushell to work as the shell in neovim, but having nushell at my fingertips directly in my text editor was well worth the effort.\nI am using astronvim and altered the astrocore.lua file like so:\nshell = \u0026quot;/home/lk/.cargo/bin/nu\u0026quot;, shellcmdflag = \u0026quot;--login --stdin --no-newline -c\u0026quot;, shellredir = \u0026quot;out+err\u0026gt; %s\u0026quot;, shellpipe = \u0026quot;| complete | update stderr { ansi strip } | tee { get stderr | save --force --raw %s } | into record\u0026quot;, shelltemp = false, shellxescape = \u0026quot;\u0026quot;, shellxquote = \u0026quot;\u0026quot;, shellquote = \u0026quot;\u0026quot;, Some more generel explanation and settings can be found here:\nintegrations/nvim/init.lua at main · nushell/integrations\nPS. I added the --login flag to get acces to my custom commands. They are very useful for me in nvim since I use it mainly to generate journalistic content. Especially my custom commands concerning aichat and \u0026ldquo;tucs\u0026rdquo;.\nTo read more about tuc and generative ai, see this blog posting:\nWorking with tuc in nushell · Kiils\nAnd more generally about tuc as a data structure, please see:\ntuc as text based data structure for online research · Kiils\n","date":"22 June 2024","permalink":"/en/blog/2024-06-22-using-nushell-in-neovim/","section":"Blog","summary":"I took me a little while completely getting nushell to work as the shell in neovim, but having nushell at my fingertips directly in my text editor was well worth the effort.","title":"Using nushell in neovim"},{"content":"Workflow:\nGetting the links\nIn my browser I have a shortcut which gives me the title and url as a link in markdown format to the current page, and copies the link to my clipboard.\nThe link could look like this:\n[Casestory: Marie Bjerre, profil på en magt-djøfer](https://www.folkets.dk/node/5041) The clipboard can hold any amount of such links.\nWhen I have a collection of these links in my clipboard history, I can feed them to a \u0026ldquo;scraper\u0026rdquo; and the scraped result to an llm. All the while still keeping the titles and urls from the links.\nThis way I can \u0026ldquo;enrich\u0026rdquo; each link with the content from the linked page. Then with a llm I can further work with this content.\nLet\u0026rsquo;s say I have a bunch of markdown links in my clipboard history. The following nushell custom command will take these and enrich each of them with a summary:\n# summarize def \u0026#39;q summarize\u0026#39; [ --number (-n): int = 1 ...prompt ] { let Ttu = cliphist list | lines | each { cliphist decode | lines } | flatten | each { parse \u0026#34;[{title}]({url})\u0026#34; } | flatten | last $number print \u0026#34;✍️ SUMMARIZING:\u0026#34; ($Ttu | get title | to text) \u0026#34; ...\u0026#34; \u0026#34;\\n\u0026#34; sleep 3sec let c = $Ttu | each {|row| ( reader -o $row.url | aichat summarize ($prompt | str join \u0026#39; \u0026#39;) ) } | wrap content let Ttuc = $Ttu | merge $c $Ttuc | to json | wl-copy $Ttuc } This command will print a table for each page with the title, the url and the summarized content.\nIt will also \u0026ldquo;save\u0026rdquo; a copy of the table as JSON in my clipboard history.\nOften I do something else before running the command, though.\nI define a variable to hold the result of the command, like so:\nlet r = q summarize Now the result of the command is saved as the variable r instead of printing it to the screen.\nThe result can then easily be shown simply by writing\n$r on the command line.\nAnd if I want the see for example a particular row in the resulting table, that is a specific record, I just specify the row number I want like so:\n$r.0 If I want not only 1 specific row but several rows, I can do it this way:\n$r | get 0 2 5 I can then save the relevant row as a new variable and process them further to create new content.\nSee also: tuc as text based data structure for online research · Kiils\n","date":"11 June 2024","permalink":"/en/blog/2024-06-11-working-with-tuc-in-nushell/","section":"Blog","summary":"Workflow:","title":"Working with tuc in nushell"},{"content":"I do a lot of research online. And I try to use AI to assist me.\nI also use nushell a lot.\nAfter experimenting a lot I\u0026rsquo;ve found a data structure that is both simple and sufficient for the kind of research I do online and the way I use it with nushell and AI.\nI call this datastructure tuc:\n╭───┬─────────╮ │ 0 │ title │ │ 1 │ url │ │ 2 │ content │ ╰───┴─────────╯ In nushell this corresponds to a record with 3 keys:\nrecord\u0026lt;title: string, url: string, content: string\u0026gt; With some content this could look like so:\n╭─────────┬────────────────────────────────────────────────╮ │ title │ About 50% Of Jobs Will Be Displaced By AI │ │ │ Within 3 Years - YouTube │ │ url │ https://www.youtube.com/watch?v=zZs447dgMjg │ │ content │ hu and I have been talking backstage and we │ │ │ were deciding should we give you guys some │ │ │ sweet dreams tonight or some nightmares and we │ │ │ decided maybe a little bit of both uh we have │ │ │ a lot to discuss what the future looks like │ With nushell I can easily convert this to json\n$record | to json\n{ \u0026#34;title\u0026#34;: \u0026#34;About 50% Of Jobs Will Be Displaced By AI Within 3 Years - YouTube\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://www.youtube.com/watch?v=zZs447dgMjg\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;hu and I have been talking backstage and we were deciding should we give you guys some sweet dreams tonight or some nightmares and we decided maybe ... \u0026#34; } $record | to yaml\ntitle: About 50% Of Jobs Will Be Displaced By AI Within 3 Years - YouTube url: https://www.youtube.com/watch?v=zZs447dgMjg content: hu and I have been talking backstage and we were deciding should we give you guys some sweet dreams tonight or some nightmares and we decided maybe a little bit of both uh we have a lot to discuss ... and so on.\nLet\u0026rsquo;s say I have more than one record.\n$secondrecord\n╭─────────┬──────────────────────────────────────────────────────────────────────╮ │ title │ Sådan modstår du mediers manipulation │ │ url │ https://www.folkets.dk/node/4939 │ │ content │ _Af [Lennart](https://www.folkets.dk/brugere/lennart-kiil \u0026#34;Vis │ │ │ brugerprofil.\u0026#34;)_ │ │ │ _— Onsdag den 28. feb 2024, 09:17_ │ I can now append this record to the previous one:\n$record | append $secondrecord\n╭───┬────────────────────────────────────────────────────────────────────┬─────────────────────────────────────────────┬───────────────────────────────────────────╮ │ # │ title │ url │ content │ ├───┼────────────────────────────────────────────────────────────────────┼─────────────────────────────────────────────┼───────────────────────────────────────────┤ │ 0 │ About 50% Of Jobs Will Be Displaced By AI Within 3 Years - YouTube │ https://www.youtube.com/watch?v=zZs447dgMjg │ hu and I have been talking backstage and │ │ │ │ │ we were deciding should we give you guys │ ... │ 1 │ Sådan modstår du mediers manipulation │ https://www.folkets.dk/node/4939 │ _Af [Lennart](https://www.folkets.dk/brug │ │ │ │ │ ere/lennart-kiil \u0026#34;Vis brugerprofil.\u0026#34;)_ │ │ │ │ │ _— │ │ │ │ │ Onsdag den 28. feb 2024, 09:17_ │ When nushell is given a list of records it turns them into a table as seen above.\nI could also save the table as a new variable like so:\nlet research = $record | append $secondrecord\nThen when my tuc-table includes all the research I need, often between 5 and 25 records, I can feed the tuc as JSON to an LLM to analyze it or to give it some other form.\n$research | to json | llm \u0026quot;interpret the JSON and create an article with markdown links to sources and plenty of direct quotes\nRemember the tuc: title url content.\n","date":"4 June 2024","permalink":"/en/blog/2024-06-04-tuc-as-a-basic-ai-data-structure/","section":"Blog","summary":"I do a lot of research online.","title":"tuc as text based data structure for online research"},{"content":"I wanted to get some links to some content on the Citizen\u0026rsquo;s journalism site Folkets to be able to work with this with AI.\nI could have used the site map.\nBut the site has several RSS feeds that contain mere useful information and are structured more in line with the user facing structure of the site.\nI just needed to get the front page feed which is available here:\nhttps://www.folkets.dk/rss.xml\nNushell is great for working with structured data and has most of what I needed builtin. Except I needed to use the query plugin also.\nI used these:\nNushell nu_plugin_query · nushell/nushell · GitHub Now to get the actual links from the feed all I had to do was give this command at my terminal:\nhttp get https://www.folkets.dk/rss.xml | query web -q item | each { $in.3 | str trim } There is an easier way to get the links (but usually not in the same order as the source):\nhttp get https://www.folkets.dk/rss.xml | query xml //item/link Then nushell gives me a simple table with the links like so:\n╭───┬──────────────────────────────────╮ │ # │ //item/link │ ├───┼──────────────────────────────────┤ │ 0 │ https://www.folkets.dk/node/5036 │ │ 1 │ https://www.folkets.dk/node/5041 │ │ 2 │ https://www.folkets.dk/node/5038 │ │ 3 │ https://www.folkets.dk/node/5035 │ │ 4 │ https://www.folkets.dk/node/5040 │ │ 5 │ https://www.folkets.dk/node/5042 │ │ 6 │ https://www.folkets.dk/node/5037 │ │ 7 │ https://www.folkets.dk/node/5043 │ │ 8 │ https://www.folkets.dk/node/5039 │ │ 9 │ https://www.folkets.dk/node/5032 │ ╰───┴──────────────────────────────────╯ This can even be done with nushell without any plugins like so:\nhttp get https://www.folkets.dk/rss.xml | from xml | get content | get content | get 0 | where tag == item | get content | flatten | where tag == link | get content | flatten | get content ","date":"3 June 2024","permalink":"/en/blog/2024-06-03-get-items-from-rss-feed-with-nushell/","section":"Blog","summary":"I wanted to get some links to some content on the Citizen\u0026rsquo;s journalism site Folkets to be able to work with this with AI.","title":"Get items from rss feed with nushell 🐘"},{"content":"","date":null,"permalink":"/en/tools/chatgpt/","section":"Tools","summary":"","title":"ChatGPT"},{"content":"Welcome to aichat 0.17.0\nType \u0026ldquo;.help\u0026rdquo; for additional help.\nalm\u0026gt; I need help! My mental load is too much. Write some python code to help me get organized! Sure, here is a simple Python script that can help you manage your tasks. It allows you to add, view, and remove tasks from a to-do list.\nimport json import os FILENAME = \u0026#39;todo_list.json\u0026#39; def load_tasks(): if os.path.exists(FILENAME): with open(FILENAME, \u0026#39;r\u0026#39;) as file: return json.load(file) return [] def save_tasks(tasks): with open(FILENAME, \u0026#39;w\u0026#39;) as file: json.dump(tasks, file, indent=4) def add_task(task): tasks = load_tasks() tasks.append({\u0026#34;task\u0026#34;: task, \u0026#34;completed\u0026#34;: False}) save_tasks(tasks) print(f\u0026#39;Task \u0026#34;{task}\u0026#34; added!\u0026#39;) def view_tasks(): tasks = load_tasks() if not tasks: print(\u0026#34;No tasks available.\u0026#34;) else: for i, item in enumerate(tasks): status = \u0026#34;Done\u0026#34; if item[\u0026#34;completed\u0026#34;] else \u0026#34;Not Done\u0026#34; print(f\u0026#34;{i + 1}. {item[\u0026#39;task\u0026#39;]} - {status}\u0026#34;) def remove_task(task_number): tasks = load_tasks() if 0 \u0026lt; task_number \u0026lt;= len(tasks): removed = tasks.pop(task_number - 1) save_tasks(tasks) print(f\u0026#39;Task \u0026#34;{removed[\u0026#34;task\u0026#34;]}\u0026#34; removed!\u0026#39;) else: print(\u0026#34;Invalid task number.\u0026#34;) def mark_task_as_done(task_number): tasks = load_tasks() if 0 \u0026lt; task_number \u0026lt;= len(tasks): tasks[task_number - 1][\u0026#34;completed\u0026#34;] = True save_tasks(tasks) print(f\u0026#39;Task \u0026#34;{tasks[task_number - 1][\u0026#34;task\u0026#34;]}\u0026#34; marked as done!\u0026#39;) else: print(\u0026#34;Invalid task number.\u0026#34;) def main(): while True: print(\u0026#34;\\n1. Add Task\\n2. View Tasks\\n3. Remove Task\\n4. Mark Task as Done\\n5. Exit\u0026#34;) choice = input(\u0026#34;Enter your choice: \u0026#34;) if choice == \u0026#39;1\u0026#39;: task = input(\u0026#34;Enter the task: \u0026#34;) add_task(task) elif choice == \u0026#39;2\u0026#39;: view_tasks() elif choice == \u0026#39;3\u0026#39;: task_number = int(input(\u0026#34;Enter task number to remove: \u0026#34;)) remove_task(task_number) elif choice == \u0026#39;4\u0026#39;: task_number = int(input(\u0026#34;Enter task number to mark as done: \u0026#34;)) mark_task_as_done(task_number) elif choice == \u0026#39;5\u0026#39;: break else: print(\u0026#34;Invalid choice! Please try again.\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: main() This script uses a simple JSON file to store your tasks. You can:\nAdd a new task. View all tasks. Remove a task by its number. Mark a task as done. Exit the program. To run the script, simply execute the Python file in your terminal or command prompt. This should give you a basic task manager to help you get organized.\n","date":"31 May 2024","permalink":"/en/blog/2024-05-31-how-programming-can-help-reduce-mental-load/","section":"Blog","summary":"Welcome to aichat 0.","title":"How programming can help reduce mental load 🦾"},{"content":"Requirements # Nushell Nushell - query plugin Aichat - CLI tool AI platforms Mission # Know a little about each large city in India\nSolution # http get https://en.wikipedia.org/wiki/List_of_cities_in_India_by_population | query web --as-table [City \u0026#39;Population(2011)[3]\u0026#39; \u0026#39;Population(2001)[3][a]\u0026#39; \u0026#39;State or unionterritory\u0026#39; \u0026#39;Ref\u0026#39;] | select City | insert desc {|row| $row.City | aichat \u0026#39;provide ultra short description of this city\u0026#39; } | save cities.json Explanation # The first line gets the web page from Wikipedia The second converts the html table into nushell table format The third selects the City column The fourth creates a new column called \u0026lsquo;desc\u0026rsquo; The fifth feeds city names row by row to aichat with my instruction The sixth saves the result in json format Result # Now each city has a short description appended:\n[ { \u0026#34;City\u0026#34;: \u0026#34;Mumbai\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;India\u0026#39;s bustling financial hub and entertainment capital, Mumbai is a diverse metropolis known for its iconic Bollywood industry, historic landmarks, and vibrant street life.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Delhi\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;India\u0026#39;s capital, historical landmarks, diverse culture, political hub.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Bangalore\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Bangalore, also known as Bengaluru, is the capital of Karnataka, India, known for its IT industry and pleasant climate.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Hyderabad\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Capital of Telangana, India; known for biryani, technology industry, Charminar, and pearl trading.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Ahmedabad\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Ahmedabad is a vibrant Indian city known for its textiles, rich history, and the Sabarmati Ashram associated with Mahatma Gandhi.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Chennai\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Coastal South Indian city known for its cultural heritage, IT industry, and Marina Beach.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Kolkata \u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Kolkata: Cultural capital of India; historical city with colonial architecture, vibrant arts scene, and notable intellectual heritage.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Surat\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Surat is a bustling port city in the Indian state of Gujarat known for its diamond cutting and textile industries.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Pune\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Pune is a vibrant educational and IT hub in western India known for its historical landmarks and cultural diversity.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Jaipur\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Jaipur, also known as the Pink City, is the capital of Rajasthan in India, known for its rich history, stunning palaces, and vibrant culture.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Lucknow\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Capital of Uttar Pradesh, known for its Nawabi era history and exquisite cuisine, particularly kebabs and biryanis.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Kanpur\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Kanpur: Industrial city on the Ganges in Uttar Pradesh, India, known for textiles and leather.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Nagpur\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Nagpur is a major city in Maharashtra, India, known for its oranges and as a political and commercial hub in central India.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Indore\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Indore is a bustling, commercial city in central India, known for its culinary scene, historical landmarks, and as the education hub of the state of Madhya Pradesh.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Thane\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Thane is a bustling city adjacent to Mumbai in Maharashtra, India, known for its lakes and the ancient Masunda Lake temple complex.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Bhopal\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Bhopal is the capital city of the Indian state of Madhya Pradesh, known for its lakes, greenery, and rich history, including the Bhopal gas tragedy.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Visakhapatnam\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Visakhapatnam: Indian coastal city, port hub, industrial center, and scenic beauty in Andhra Pradesh.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Pimpri-Chinchwad\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Pimpri-Chinchwad: Industrial city in Maharashtra, India, known for its automotive and manufacturing industries, part of Pune Metropolitan Region.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Patna\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Capital of Bihar, India; ancient city on the Ganges River.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Vadodara\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Vadodara, formerly known as Baroda, is a culturally-rich city in the Indian state of Gujarat, known for its palaces, parks, temples, and educational institutions.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Ghaziabad\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Ghaziabad is a rapidly urbanizing city in the Indian state of Uttar Pradesh, part of the National Capital Region, known for its industrial growth and proximity to New Delhi.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Ludhiana\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Ludhiana: Industrial city in Punjab, India, known for hosiery, textiles, and light engineering.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Agra\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Agra: Indian city, home to the Taj Mahal.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Nashik\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Nashik: Indian city known for temples, vineyards, Kumbh Mela festival, and as a Hindu pilgrimage site near the Godavari River.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Faridabad\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Faridabad is an industrial city in the northern Indian state of Haryana, part of the National Capital Region near New Delhi.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Meerut\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Meerut is a historical city in the Indian state of Uttar Pradesh, known for its role in the 1857 First War of Indian Independence and as a hub for sports goods manufacturing.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Rajkot\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Rajkot is a vibrant city in the Indian state of Gujarat, known for its history, textile industry, and Gandhi-related landmarks.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Kalyan-Dombivali\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Kalyan-Dombivali is a twin city and a municipal corporation in the Thane district of Maharashtra, India, part of the Mumbai Metropolitan Region known for its residential areas and rapidly developing infrastructure.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Vasai-Virar\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Vasai-Virar is a rapidly urbanizing city in the Mumbai Metropolitan Region of Maharashtra, India, known for its cultural heritage and growing infrastructure.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Varanasi\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Ancient holy city on the Ganges in India, known for spirituality, ghats, and temples.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Srinagar\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Srinagar is the summer capital of Jammu and Kashmir, India, known for its beautiful lakes, houseboats, and gardens.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Aurangabad\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Aurangabad is a historic city in Maharashtra, India, known for its medieval monuments, including the UNESCO World Heritage Sites of Ajanta and Ellora caves.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Dhanbad\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Dhanbad is an Indian city known for coal mining and industrial activities, located in Jharkhand state.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Amritsar\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Sikh holy city, Golden Temple, Punjab region, India.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Navi Mumbai\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Planned satellite city of Mumbai, India, with modern infrastructure and rapid urban growth.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Prayagraj\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Prayagraj, formerly known as Allahabad, is a historic city in Uttar Pradesh, India, renowned for its confluence of three rivers: the Ganges, Yamuna, and mythical Saraswati, making it a pivotal site for Hindu pilgrimages.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Howrah\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Howrah is an industrial city located in the Indian state of West Bengal, featuring the iconic Howrah Bridge and serving as a transportation hub adjacent to Kolkata.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Ranchi\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Ranchi is the capital of the Indian state of Jharkhand, known for its waterfalls, tribal heritage, and rich mineral resources.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Jabalpur\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Jabalpur: A historic Indian city known for marble rock formations along the Narmada River, with significant cultural heritage and military bases.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Gwalior\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Gwalior is a historic city in central India, known for its majestic hilltop fort, rich cultural heritage, and classical music tradition.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Coimbatore\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Coimbatore is a bustling industrial city in the southern Indian state of Tamil Nadu, known for its textile industry, manufacturing, pleasant weather, and proximity to hill stations like Ooty.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Vijayawada\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Vijayawada: Major city in Andhra Pradesh, India, known for the Krishna River and canal network.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Jodhpur\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Jodhpur: Indian city, known as the \\\u0026#34;Blue City\\\u0026#34;, famous for its historic Mehrangarh Fort and vibrant culture.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Madurai\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Ancient temple city in Tamil Nadu, India, known for the Meenakshi Amman Temple.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Raipur\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Raipur is the capital city of the Indian state of Chhattisgarh, known for its steel industries and educational institutions.\\n\u0026#34; }, { \u0026#34;City\u0026#34;: \u0026#34;Kota\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Kota: An educational hub in Rajasthan, India known for its coaching centers for competitive exam preparations and the Chambal river.\\n\u0026#34; } ] That would have taken a long time to do manually.\n","date":"22 March 2024","permalink":"/en/blog/using-nushell-with-generative-artificial-intelligence/","section":"Blog","summary":"Requirements # Nushell Nushell - query plugin Aichat - CLI tool AI platforms Mission # Know a little about each large city in India","title":"Using Nushell 🐘 with Generative Artificial Intelligence 🤖"},{"content":"","date":null,"permalink":"/en/emner/","section":"Emner","summary":"","title":"Emner"},{"content":"","date":null,"permalink":"/en/emner/finansiering/","section":"Emner","summary":"","title":"Finansiering"},{"content":"Works with:\n❯ : nu --version 0.82.0 run work open window right now! normally\ntask add run task add work task add open window due:now\n[run work [open window due:now]] | each {task add $in}\nCustom command\ndef nt [] { each {task add $in} } Then we can simply do\n[run work [open window due:now]] | nt\nWe can also exptend the custom command to accept a list af new tasks as a positional parameter:\ndef nt [tasks?: list] { if ($in | describe) == nothing { $tasks | each { task add $in } } else { each { task add $in} } } Then we could write:\nnt [run work [open window due:now]] And get the same result.\nAnd finally taking into consideration if no list is provided and also adding a biot of doucmentation to the command:\n# Pipe in the list of tasks or give the list as a positional parameter # Format: [taskone tasktwo [task three due:now]] def nt [tasks?: list] { if ($in | describe) == nothing { if ($tasks | describe) == nothing { \u0026#39;Pipe in the list of task or give the list as a positional parameter\u0026#39; } else { $tasks | each { task add $in } } } else { each { task add $in} } } ","date":"24 July 2023","permalink":"/en/blog/making-taskwarrior-better-with-nushell/","section":"Blog","summary":"Works with:","title":"making taskwarrior better with nushell"},{"content":"","date":null,"permalink":"/en/emner/artificial-intelligence/","section":"Emner","summary":"","title":"Artificial Intelligence"},{"content":"","date":null,"permalink":"/en/tools/fontforge/","section":"Tools","summary":"","title":"Fontforge"},{"content":"","date":null,"permalink":"/en/genrer/","section":"Genrer","summary":"","title":"Genrer"},{"content":"The other day I posted a few lines on Facebook.\nMy intention was to point out what can be called perspective - that a case can be seen from several angles.\nSpecifically, it was about \u0026ldquo;Store Bededag\u0026rdquo; and the many other more or less official holidays that spring offers in Denmark. And there are a lot of them.\nMy point was that for a self-employed person who works from home, these could well be perceived as interruptions. As a kind of disturbance.\nThere were many reactions, as you now call it, to my post.\nSome stated that the many small mini-holidays in the spring were a welcome break from life as a wage earner in the hamster wheel.\nAnd yes. It was precisely a different perspective than the one I myself had p resented. And a perspective that I can easily relate to even though I am not independ ent. I can put myself in other situations if I pay attention to it.\nThere were also a number of other reactions which were of a slightly different type.\nIt was reactions that reminded me of the way the big language models work.\nBecause it was reactions that took fragments of what I put up, and work further with these fragments. And almost started to deduce other things than what I had actually written.\nWhen the language models do that, we say they \u0026ldquo;hallucinate\u0026rdquo;.\nIt doesn\u0026rsquo;t sound nice to say about people that they hallucinate when they maybe put a little too much into something you write or interpret a little too much from it.\nBut these are clearly examples of what happens when you do not treat other people\u0026rsquo;s words in a disciplined manner.\nThen it often becomes somewhat free association.\nYou can reduce the \u0026ldquo;risk\u0026rdquo; of a conversation being characterized by too much free association, just as you can give it direction and context.\nThis kind of thing is no guarantee that the conversation won\u0026rsquo;t slip off the track and end up in a completely different place than it started. But you reduce the risk of that.\nBut also remember this:\nThe ordinary everyday conversation depends precisely on the other part y inviting in. And we all tend to fill a conversation with our own interpretations.\nThe problem arises when people conclude or infer something about the original text based on their own interpretation of it - without being sufficiently aware that this is happening.\nIf you, as a human, still want to retain some advantages over artificial intelligence for a while, then I would recommend that you pay attention to how you relate to other people\u0026rsquo;s words.\nBecause otherwise you run the risk of becoming a mediocre language model or a slightly advanced, but rather severely biased \u0026ldquo;auto-complete.\u0026rdquo;\nIt is at least as important, however, that you, as the person who starts a debate or posts some text, think a little about your wording.\nAs when talking with ChatGPT, it is important to set the framework for the conversation clearly from the start.\nSo both the sender of a message and the recipient of it have a responsibility for a successful conversation.\nAnd this applies regardless of whether you are talking to a human or a machine.\n","date":"23 May 2023","permalink":"/en/blog/humans-should-also-be-prompted-properly/","section":"Blog","summary":"The other day I posted a few lines on Facebook.","title":"Humans should also be prompted properly"},{"content":"I wanted to use the font Noto Sans with the Noto Emoji font for making an image overlay text in Hugo.\nI used Fontforge to merge the two fonts.\nAt first the emoji font was much larger than the text font.\nIn my case it only worked properly when\nOpening the text font first with \u0026lsquo;File -\u0026gt; Open File\u0026rsquo;. Then for \u0026lsquo;Element -\u0026gt; Font Info\u0026rsquo; under \u0026lsquo;General\u0026rsquo; setting \u0026lsquo;Em Size\u0026rsquo; to 2048. Now using \u0026lsquo;Element -\u0026gt; Merge Fonts\u0026rsquo; on the emoji font to merge the two. Finally creating the merged font file with \u0026lsquo;File -\u0026gt; Generate Fonts\u0026rsquo;. ","date":"23 May 2023","permalink":"/en/blog/merging-an-emoji-font-into-a-text-font/","section":"Blog","summary":"I wanted to use the font Noto Sans with the Noto Emoji font for making an image overlay text in Hugo.","title":"Merging an emoji 😘 font into a text font ❤️"},{"content":"","date":null,"permalink":"/en/genrer/tips--tricks/","section":"Genrer","summary":"","title":"Tips \u0026 Tricks"},{"content":"","date":null,"permalink":"/en/tools/marvin/","section":"Tools","summary":"","title":"Marvin"},{"content":"Recently I installed Marvin. Now, Marvin also happens to be the name of a dog dear to our family.\nSo my kids kind of feel strongly about the name, and were both a bit offended about an Artificial Intelligence with the same name.\nBut in this case Marvin is a\nbatteries-included library for building AI-powered software. Marvin\u0026rsquo;s job is to integrate AI directly into your codebase by making it look and feel like any other function. Marvin is building the gears, cranks, and pistons to let mechanical software systems integrate with and leverage the raw power of Large Language Models.\nTo test out this piece of software, I asked it to construct various bots for me.\nMarvin makes it easy to construct bots with different names, AI personalities and instructions.\nI\u0026rsquo;ve found it difficult to get ChatGPT to be humorous. But I gave it a go again with Marvin after I asked it to construct a bot capable of making cringy dad jokes.\nAfter constructing the bot I gave it this prompt:\nMe: give me some tricks to make me son laugh with emojis\nMarvin responded:\n🍍 + 🍰 = Pineapple upside-down cake 🤣 🧀 + 🥚 = Cheesy egg 🤪 🐘 + 🎂 = Elephant birthday cake 🤣 🐱 + 🎹 = Keyboard cat 🤪 🐷 + 🌽 = Corn on the hog 😆 My son did not find that amusing at all.\nThe thing is, though, I happen to know a lot more about my son than Marvin does. So I gave et a bit of context:\nMe: hi is ten years old and likes to play soccer please try with that again\nOf course! Here are some soccer-themed emoji combinations that might make your 10-year-old son laugh:\n⚽ + 🐶 = Doggy goal 🐾 🥅 + 💩 = Goalpost accident 😂 🦶 + 🥔 = Potato foot 🤣 🕺 + ⚽ = Soccer dance party 🎉 🥅 + 🕷️ = Spider goalie 🕸️ I hope these make your son laugh and bring a smile to his face!\nThose really made my son smile. And number two and number three made him LOL.\nSo, why am I writing a blog post about this?\nBecause I am interested in the intersection between Artificial Intelligence, language and \u0026ldquo;soul\u0026rdquo;.\nI starting to think about this question:\nHow much does an AI need to know about us to make an ongoing interaction worthwhile?\nGiving a bot a \u0026ldquo;personality\u0026rdquo; is one thing.\nRevealing your own innermost life to the bot?\nThat is something else entirely.\nBut this is exactly what will start to happen. Now.\nBonus:\nCringeDadBot: I\u0026rsquo;m here to brighten your day with some terrible dad jokes. Just ask me to tell you a joke, and I\u0026rsquo;ll do my best to make you groan. If you want to stop the jokes, just say \u0026lsquo;stop\u0026rsquo; or \u0026lsquo;bye\u0026rsquo;. Let\u0026rsquo;s have some fun!\nME: tell me a joke about a dad who always uses chatgpt and thinks he will get rich but never gets rich\nCringeDadBot: Why did the dad keep using chatgpt to try and get rich?\nBecause he thought it was a text-to-coin converter!\n","date":"22 May 2023","permalink":"/en/blog/how-chatgpt-made-my-surly-son-laugh/","section":"Blog","summary":"Recently I installed Marvin.","title":"🦶 + 🥔 = Potato foot 🤣 - and other examples of how ChatGPT made my son laugh. And why it is important"},{"content":"Me: is chatgpt really just a glorified markov chain\nChatGPT:\nChatGPT is a type of language model that is based on the transformer architecture, which is a neural network-based approach to natural language processing. While the Markov Chain is a mathematical model that can be used to generate text, it is a relatively simple model compared to neural network-based models like ChatGPT.\nChatGPT is trained on a massive amount of text data and uses a deep neural network with multiple layers to learn patterns in the data. The model is trained to predict the next word in a sentence based on the context of the previous words. This allows ChatGPT to generate text that is more coherent and semantically meaningful than text generated by a simple Markov Chain.\nMarkov Chain, on the other hand, is a statistical model that uses a set of states and transition probabilities to predict the next state in a sequence. It is trained on a smaller amount of data compared to neural network-based models like ChatGPT and generates text based on the probability of certain words or phrases following others.\nIn summary, ChatGPT is a much more advanced and sophisticated model than a simple Markov Chain, and can generate text that is more coherent, contextually appropriate, and human-like.\nMe: how does a markov chain differ from \u0026ldquo;deep learning\u0026rdquo; in neural networks\nChatGPT:\nMarkov Chain and deep learning neural network are two different approaches to modeling and generating sequences of data, such as text.\nA Markov Chain is a mathematical model that uses a set of states and transition probabilities to predict the next state in a sequence. It is trained on a relatively small amount of data and generates text by predicting the next word or phrase based on the probability of certain words or phrases following others. Markov Chain models are simple and computationally efficient, but they are limited in their ability to capture complex patterns and relationships in the data.\nDeep learning neural networks, on the other hand, are a type of machine learning that uses multi-layered neural networks to learn patterns in data. These models are trained on a large amount of data and are able to automatically learn representations of the data that can be used to generate text or other sequences. They are more powerful and flexible than Markov Chain models as they can learn a wide range of features and patterns in the data, and can also be used to perform a wide range of natural language processing tasks such as language translation, text summarization, and sentiment analysis.\nIn summary, Markov Chain is a simpler model compared to deep learning neural network, but deep learning neural networks are more powerful and flexible. They are able to learn more complex patterns in data and can be used to perform a wide range of natural language processing tasks.\n","date":"12 January 2023","permalink":"/en/blog/chatgpt-glorified-markov-chain/","section":"Blog","summary":"Me: is chatgpt really just a glorified markov chain","title":"Is ChatGPT more than a glorified Markov chain? Here is what ChatGPT itself has to say about that"},{"content":"","date":null,"permalink":"/en/emner/kunstig-intelligens/","section":"Emner","summary":"","title":"Kunstig Intelligens"},{"content":"","date":null,"permalink":"/en/emner/nlp/","section":"Emner","summary":"","title":"Nlp"},{"content":"","date":null,"permalink":"/en/emner/tekstskabelse/","section":"Emner","summary":"","title":"Tekstskabelse"},{"content":"","date":null,"permalink":"/en/emner/billing/","section":"Emner","summary":"","title":"Billing"},{"content":"","date":null,"permalink":"/en/cases/","section":"Cases","summary":"","title":"Cases"},{"content":"","date":null,"permalink":"/en/cases/folkets/","section":"Cases","summary":"","title":"Folkets"},{"content":"","date":null,"permalink":"/en/emner/payment/","section":"Emner","summary":"","title":"Payment"},{"content":"","date":null,"permalink":"/en/genrer/recommendation/","section":"Genrer","summary":"","title":"Recommendation"},{"content":"I had to upgrade my payment system on my media platform – Folkets.\nSince I was already on Stripe, I was looking for something that made it easy to keep up with Stripe in the sense that Stripe is developing new features at a rapid rate.\nI found Servicebot.io which is basically a layer on top of Stripe\u0026rsquo;s very flexible API. This layer makes it easy to give your users or customers an interaction with your payment implementation that is both simple to use and complete with regards to functionality.\nHere is some of it on Folkets:\nI needed, for example, functionality where a user could download invoices past and present, since I am planning to do more B2B, and companies need the invoice for their bookkeeping.\nAt the same time I did not want a cluttered or complicated user interface that could be off putting to non-business customers.\nServicebot.io made it easy for me to achieve both of these objectives.\nBut what really set Servicebot aside, was the service they provided during the transition from my old payment layer to the new one they offered.\nAny issue or request, that I had, was taken seriously. They were always replying within a few hours, in spite of the fact that we are on opposite ends of the Atlantic ocean.\nMaybe the extraordinary responsiveness and service is due in part to the relatively small team behind the service, but it is a level of customer service I think every company should strive for regardless of size.\nServicebot.io has my highest recommendation.\nHere is a video of it live on Folkets:\n","date":"14 May 2020","permalink":"/en/blog/servicebot-is-great/","section":"Blog","summary":"Servicebot has my highest recommendation","title":"Servicebot.io is great"},{"content":"","date":null,"permalink":"/en/emner/stripe/","section":"Emner","summary":"","title":"Stripe"},{"content":"Writing styles for ChatGPT, use in initial \u0026ldquo;system message\u0026rdquo;.\n","date":null,"permalink":"/en/resource/personas/","section":"Resources","summary":"Writing styles for ChatGPT, use in initial \u0026ldquo;system message\u0026rdquo;.","title":"Awesome ChatGPT Personas"},{"content":"","date":null,"permalink":"/en/brands/","section":"Brands","summary":"","title":"Brands"},{"content":"","date":null,"permalink":"/en/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/en/domain/climate-encyclopedia/","section":"Domains","summary":"","title":"Climate Encyclopedia"},{"content":"","date":null,"permalink":"/en/domain/","section":"Domains","summary":"","title":"Domains"},{"content":"Pricing on www.folkets.dk (Folkets) # I receive many request for paid content on www.folkets.dk\nAdvertorials in English\nUSD 500\nAdvertorials in Danish\nUSD 400\nAnything gambling related regardless of language\nUSD 1000\nOne link per advertorial, although inclusion of two extra non-commercial links are accepted. Bulk discount available.\nPlease contact:\nKiils V/ Lennart Kiil\nlennartkiil@gmail.com\n","date":"1 January 0001","permalink":"/en/domain/folkets/","section":"Domains","summary":"Pricing on www.","title":"Folkets.dk"},{"content":"","date":"1 January 0001","permalink":"/en/person/lennart/","section":"Person","summary":"","title":"Lennart Kiil"},{"content":"","date":null,"permalink":"/en/person/","section":"Person","summary":"","title":"Person"},{"content":"","date":null,"permalink":"/en/tags/","section":"Tags","summary":"","title":"Tags"}]